'use strict';

// NOTE: indices must be in ascending order

const assert = require('assert');

const {
  hashNode,
  to32ByteBuffer,
  from32ByteBuffer,
  to32ByteBoolBuffer,
  toBigIntBoolSet,
  bigIntTo32ByteBuffer,
  bufferToBigInt,
} = require('./utils');

// This is the MultiIndexedProof.generate algorithm, however, since indices will not be used to
// compute the root at verify-time, a set fo flags need to be generated to indicate, for each
// hash performed at verify-time, whether a previously computed hash will be needed (True), or
// a decommitment will be needed. Since this method only works with hash functions that sort the
// hashed material, there is no need to provide instructions on hashing order. However, such a
// proof would also be possible, with a separate set of flags to instruct the hashing order.
// See MultiIndexedProof.generate for relevant inline comments.
const generateBooleans = ({ tree, elementCount, indices }, options = {}) => {
  const { sortedHash = true } = options;
  const known = Array(tree.length).fill(false);
  const relevant = Array(tree.length).fill(false);
  const decommitments = [];
  const flags = [];
  const orders = [];
  const skips = [];
  const leafCount = tree.length >>> 1;

  for (let i = 0; i < indices.length; i++) {
    assert(i === 0 || indices[i - 1] < indices[i], 'Indices must be in ascending order.');
    known[leafCount + indices[i]] = true;

    // The parent of this node is relevant, as there will be a hash computed at verify-time.
    relevant[(leafCount + indices[i]) >>> 1] = true;
  }

  for (let i = leafCount - 1; i > 0; i--) {
    const leftChildIndex = i << 1;
    const left = known[leftChildIndex];
    const right = known[leftChildIndex + 1];
    const sibling = tree[leftChildIndex + left];

    if (left ^ right) decommitments.push(sibling);

    // Since there will be a hash computed at verify-time, push the flag on wether this hash
    // will require a decommitment (False) or a previously computed hash (True). Also, if the
    // sibling of this child does not exist, the sibling must be to the "right" of the
    // "right-most" leaf, so the hash can be skipped in favor of just using the child itself.
    // Further, the parent of this node it itself relevant, in a subsequent iteration.
    if (relevant[i]) {
      flags.push(left === right);
      skips.push(!sibling);
      orders.push(left);
      relevant[i >>> 1] = true;
    }

    known[i] = left || right;
  }

  return {
    elementCount,
    decommitments: decommitments.filter((d) => d).map(Buffer.from),
    flags,
    skips,
    orders: !sortedHash ? orders : undefined,
  };
};

// Convert the flags, skips, and orders generated by generateBooleans into a 32-byte bit-set
const generateBits = (parameters, options = {}) => {
  const { elementCount, decommitments, flags, orders, skips } = generateBooleans(parameters, options);

  assert(flags.length <= 255, 'Proof too large for bit flags.');

  const stopMask = 1n << BigInt(flags.length);
  const proof = orders ? [to32ByteBoolBuffer(orders)].concat(decommitments) : decommitments;
  const flagsAsBits = bigIntTo32ByteBuffer(toBigIntBoolSet(flags) | stopMask);
  const skipsAsBits = bigIntTo32ByteBuffer(toBigIntBoolSet(skips) | stopMask);

  return { compactProof: [to32ByteBuffer(elementCount), flagsAsBits, skipsAsBits].concat(proof) };
};

const generate = (parameters, options = {}) => {
  return options.compact ? generateBits(parameters, options) : generateBooleans(parameters, options);
};

// This is the MultiIndexedProof.getRoot algorithm, slightly simplified to take into account that
// this is to be used with a hash function that sorts the material it hashes, and thus this uses flags
// to determine hashing content, instead of the indices. Further, this implements skipping hashing for
// nodes without siblings to the "right", in the case of unbalanced trees.
// See MultiIndexedProof.getRoot for relevant inline comments.
const getRootBooleans = ({ leafs, elementCount, flags, skips, orders, decommitments }, options = {}) => {
  const { hashFunction = hashNode } = options;
  const hashCount = flags.length;
  const leafCount = leafs.length;
  const hashes = leafs.map((leaf) => leaf).reverse();

  let readIndex = 0;
  let writeIndex = 0;
  let decommitmentIndex = 0;

  for (let i = 0; i < hashCount; i++) {
    if (skips[i]) {
      hashes[writeIndex++] = hashes[readIndex++];

      readIndex %= leafCount;
      writeIndex %= leafCount;
      continue;
    }

    const right = flags[i] ? hashes[readIndex++] : decommitments[decommitmentIndex++];
    readIndex %= leafCount;
    const left = hashes[readIndex++];
    hashes[writeIndex++] = orders?.[i] ? hashFunction(left, right) : hashFunction(right, left);

    readIndex %= leafCount;
    writeIndex %= leafCount;
  }

  const rootIndex = (writeIndex === 0 ? leafCount : writeIndex) - 1;

  return { root: Buffer.from(hashes[rootIndex]), elementCount };
};

// This is identical to the above getRootBooleans algorithm, differing only in that the
// the flag and skip bit-set is shifted and checked, rather than boolean arrays.
// See getRootBooleans for relevant inline comments.
const getRootBits = ({ leafs, compactProof }, options = {}) => {
  const { hashFunction = hashNode, sortedHash = true } = options;
  const elementCount = from32ByteBuffer(compactProof[0]);
  const flags = bufferToBigInt(compactProof[1]);
  const skips = bufferToBigInt(compactProof[2]);
  const orders = sortedHash ? undefined : bufferToBigInt(compactProof[3]);
  const decommitments = compactProof.slice(sortedHash ? 3 : 4);
  const leafCount = leafs.length;
  const hashes = leafs.map((leaf) => leaf).reverse();

  let readIndex = 0;
  let writeIndex = 0;
  let decommitmentIndex = 0;
  let bitCheck = 1n;

  while (true) {
    const flag = flags & bitCheck;

    if (skips & bitCheck) {
      if (flag) {
        const rootIndex = (writeIndex === 0 ? leafCount : writeIndex) - 1;

        return { root: hashes[rootIndex], elementCount };
      }

      hashes[writeIndex++] = hashes[readIndex++];

      readIndex %= leafCount;
      writeIndex %= leafCount;
      bitCheck <<= 1n;
      continue;
    }

    const right = flag ? hashes[readIndex++] : decommitments[decommitmentIndex++];
    readIndex %= leafCount;
    const left = hashes[readIndex++];

    const order = orders && orders & bitCheck;
    hashes[writeIndex++] = order ? hashFunction(left, right) : hashFunction(right, left);

    readIndex %= leafCount;
    writeIndex %= leafCount;
    bitCheck <<= 1n;
  }
};

const getRoot = (parameters, options = {}) => {
  return parameters.compactProof ? getRootBits(parameters, options) : getRootBooleans(parameters, options);
};

// This is identical to the above getRootBooleans algorithm, differing only in that the
// new root (due to the updated leafs), is computed along the way.
// See getRootBooleans for relevant inline comments.
const getNewRootBooleans = (
  { leafs, updateLeafs, elementCount, flags, skips, orders, decommitments },
  options = {}
) => {
  const { hashFunction = hashNode } = options;
  const hashCount = flags.length;
  const leafCount = leafs.length;
  const hashes = leafs.map((leaf) => leaf).reverse();
  const updateHashes = updateLeafs.map((leaf) => leaf).reverse();

  let readIndex = 0;
  let writeIndex = 0;
  let decommitmentIndex = 0;

  for (let i = 0; i < hashCount; i++) {
    if (skips[i]) {
      hashes[writeIndex] = hashes[readIndex];
      updateHashes[writeIndex++] = updateHashes[readIndex++];

      readIndex %= leafCount;
      writeIndex %= leafCount;
      continue;
    }

    const right = flags[i] ? hashes[readIndex] : decommitments[decommitmentIndex];
    const newRight = flags[i] ? updateHashes[readIndex++] : decommitments[decommitmentIndex++];
    readIndex %= leafCount;

    const left = hashes[readIndex];
    const newLeft = updateHashes[readIndex++];
    hashes[writeIndex] = orders?.[i] ? hashFunction(left, right) : hashFunction(right, left);
    updateHashes[writeIndex++] = orders?.[i] ? hashFunction(newLeft, newRight) : hashFunction(newRight, newLeft);

    readIndex %= leafCount;
    writeIndex %= leafCount;
  }

  const rootIndex = (writeIndex === 0 ? leafCount : writeIndex) - 1;

  return {
    root: Buffer.from(hashes[rootIndex]),
    newRoot: Buffer.from(updateHashes[rootIndex]),
    elementCount,
  };
};

// This is identical to the above getRootBits algorithm, differing only in that the
// new root (due to the updated leafs), is computed along the way.
// See getRootBits for relevant inline comments.
const getNewRootBits = ({ leafs, updateLeafs, compactProof }, options = {}) => {
  const { hashFunction = hashNode, sortedHash = true } = options;
  const elementCount = from32ByteBuffer(compactProof[0]);
  const flags = bufferToBigInt(compactProof[1]);
  const skips = bufferToBigInt(compactProof[2]);
  const orders = sortedHash ? undefined : bufferToBigInt(compactProof[3]);
  const decommitments = compactProof.slice(sortedHash ? 3 : 4);
  const leafCount = leafs.length;
  const hashes = leafs.map((leaf) => leaf).reverse();
  const updateHashes = updateLeafs.map((leaf) => leaf).reverse();

  let readIndex = 0;
  let writeIndex = 0;
  let decommitmentIndex = 0;
  let bitCheck = 1n;

  while (true) {
    const flag = flags & bitCheck;

    if (skips & bitCheck) {
      if (flag) {
        const rootIndex = (writeIndex === 0 ? leafCount : writeIndex) - 1;

        return {
          root: Buffer.from(hashes[rootIndex]),
          newRoot: Buffer.from(updateHashes[rootIndex]),
          elementCount,
        };
      }

      hashes[writeIndex] = hashes[readIndex];
      updateHashes[writeIndex++] = updateHashes[readIndex++];

      readIndex %= leafCount;
      writeIndex %= leafCount;
      bitCheck <<= 1n;
      continue;
    }

    const right = flag ? hashes[readIndex] : decommitments[decommitmentIndex];
    const newRight = flag ? updateHashes[readIndex++] : decommitments[decommitmentIndex++];
    readIndex %= leafCount;

    const left = hashes[readIndex];
    const newLeft = updateHashes[readIndex++];

    const order = orders && orders & bitCheck;
    hashes[writeIndex] = order ? hashFunction(left, right) : hashFunction(right, left);
    updateHashes[writeIndex++] = order ? hashFunction(newLeft, newRight) : hashFunction(newRight, newLeft);

    readIndex %= leafCount;
    writeIndex %= leafCount;
    bitCheck <<= 1n;
  }
};

const getNewRoot = (parameters, options = {}) => {
  return parameters.compactProof ? getNewRootBits(parameters, options) : getNewRootBooleans(parameters, options);
};

// Infers the indices of a multi proof by back-calculating the the bits of each element's
// index, based on it's relative position in each hash operation during a proof.
const getIndicesWithBooleans = ({ leafCount, flags, skips, orders }) => {
  assert(orders, 'Cannot infer indices without orders in proof.');

  const hashCount = flags.length;
  const indices = Array(leafCount).fill(0);
  const groupedWithNext = Array(leafCount).fill(false);
  const bitsPushed = Array(leafCount).fill(0);
  let leafIndex = leafCount - 1;

  for (let i = 0; i < hashCount; i++) {
    if (skips[i]) {
      while (true) {
        bitsPushed[leafIndex]++;

        if (leafIndex === 0) {
          leafIndex = leafCount - 1;
          break;
        }

        if (!groupedWithNext[leafIndex--]) break;
      }

      continue;
    }

    if (flags[i]) {
      while (true) {
        if (orders[i]) indices[leafIndex] |= 1 << bitsPushed[leafIndex];

        bitsPushed[leafIndex]++;

        if (leafIndex === 0) {
          leafIndex = leafCount - 1;
          break;
        }

        if (!groupedWithNext[leafIndex]) {
          groupedWithNext[leafIndex--] = true;
          break;
        }

        groupedWithNext[leafIndex--] = true;
      }
    }

    while (true) {
      if (!orders[i]) indices[leafIndex] |= 1 << bitsPushed[leafIndex];

      bitsPushed[leafIndex]++;

      if (leafIndex === 0) {
        leafIndex = leafCount - 1;
        break;
      }

      if (!groupedWithNext[leafIndex--]) break;
    }
  }

  return { indices };
};

// This is identical to the above getIndicesWithBooleans, but with bit sets rather than
// boolean arrays.
// See getIndicesWithBooleans for relevant inline comments
const getIndicesWithBits = ({
  leafCount,
  compactProof,
  flags = bufferToBigInt(compactProof[1]),
  skips = bufferToBigInt(compactProof[2]),
  orders = bufferToBigInt(compactProof[3]),
}) => {
  const indices = Array(leafCount).fill(0);
  const groupedWithNext = Array(leafCount).fill(false);
  const bitsPushed = Array(leafCount).fill(0);
  let leafIndex = leafCount - 1;
  let bitCheck = 1n;

  while (true) {
    const flag = flags & bitCheck;

    if (skips & bitCheck) {
      if (flag) return { indices };

      while (true) {
        bitsPushed[leafIndex]++;

        if (leafIndex === 0) {
          leafIndex = leafCount - 1;
          break;
        }

        if (!groupedWithNext[leafIndex--]) break;
      }

      bitCheck <<= 1n;
      continue;
    }

    const order = orders & bitCheck;

    if (flag) {
      while (true) {
        if (order) indices[leafIndex] |= 1 << bitsPushed[leafIndex];

        bitsPushed[leafIndex]++;

        if (leafIndex === 0) {
          leafIndex = leafCount - 1;
          break;
        }

        if (!groupedWithNext[leafIndex]) {
          groupedWithNext[leafIndex--] = true;
          break;
        }

        groupedWithNext[leafIndex--] = true;
      }
    }

    while (true) {
      if (!order) indices[leafIndex] |= 1 << bitsPushed[leafIndex];

      bitsPushed[leafIndex]++;

      if (leafIndex === 0) {
        leafIndex = leafCount - 1;
        break;
      }

      if (!groupedWithNext[leafIndex--]) break;
    }

    bitCheck <<= 1n;
  }
};

const getIndices = (parameters, options = {}) => {
  return parameters.compactProof
    ? getIndicesWithBits(parameters, options)
    : getIndicesWithBooleans(parameters, options);
};

module.exports = { generate, getRoot, getNewRoot, getIndices };
